setwd("~/Desktop/COVIDServer/Ejecucion300nuevosrceros")
#Este es un ejemplo para obtener las curvas basadas en el modelo epidemiologgico en ModeloMigracion.R
library(deSolve)
print("Corriendo en server CIMAT")
# PARAMETROS  ####################################
R0s <- read.csv("R0Estados11abril_actualizado.csv")
R01 <- R0s[,6]  #sin control
R02 <- R0s[,7]  #con control
sigma1 <- 1  #Carlos considera que practiamente E tiene periodo 0
plot(R01,R02)
sigma1 <- 1  #Carlos considera que practiamente E tiene periodo 0
sigma2 <- 1  #Carlos considera que practiamente E tiene periodo 0
sigma3 <- 1  #Carlos considera que practiamente E tiene periodo 0
alfa <- matrix(c(0.3,0.55,0.1,0.05,0.3,0.55,0.1,0.05,0.3,0.55,0.1,0.05),4,3) #carlos
colSums(alfa)  #tienen que ser un vector de 1's
alfa<-as.vector(alfa)
names(alfa) <- paste0("alfa",rep(1:3,each=4), "_", rep(1:4, 3))
gama1<-1/14  #Carlos
gama2<-1/21  #Carlos
gama3<-1/25  #Carlos
gama4<-1/25  #Carlos
delta1<-0     #Carlos
delta2<-0     #Carlos
delta3<-0.15  #Carlos
delta4<-0.5   #Carlos
omega<-1
bet<-R01*(gama1+gama1+gama3+gama4)/4
bet2<-R02*(gama1+gama1+gama3+gama4)/4
#if(length(R0)==0) {bet<-rep(bet,32)}
names(bet)<-paste0("bet", 1:32)
movilidad<-read.csv("movilidad_nacional.csv",head=TRUE)  #La información que nos pasó Pablo
Ji<-matrix(0,32,32)
Ji[cbind(movilidad$entidad_origen, movilidad$entidad_destino)]<-movilidad$tasa_movilidad
ji<-as.vector(Ji)
names(ji)<- paste0("ji",rep(1:32, 32), "_", rep(1:32, each=32))
theta <- c(sigma1=sigma1
, sigma2=sigma2
, sigma3=sigma3
, alfa
, gama1=gama1
, gama2=gama2
, gama3=gama3
, gama4=gama4
, delta1=delta1
, delta2=delta2
, delta3=delta3
, delta4=delta4
, omega=omega
, bet
, ji)
# ESTADO INICIAL  ################################
datos <- read.csv("Data-2020-04-09.csv")  #hay que checar que los estados tengan el mismo orden que parametreos.csv y valores_ini.csv
N_subnet<- read.csv("grupo_pob_nacional_entidad.csv")
N_subnet_grupo<-cbind(N_subnet[,4], N_subnet[,8]-N_subnet[,4]-N_subnet[,7],N_subnet[,7])
dd<-as.Date(datos$fecha_corte,format="%Y-%m-%d")
dd
GrupoEdad<-cut(datos$edad,breaks=c(0,4,59,120), include.lowes=TRUE, label=FALSE)
tt<-table(factor(datos$ent[dd<="2020-03-08"],levels=1:32),factor(GrupoEdad[dd<="2020-03-08"],levels=1:3))
NumCasos<-as.matrix(tt)
NumCasos
(NumCasos<-as.matrix(tt))
NumCasos_No_Obs<-0.85/.15*NumCasos # Carlos  (considerando los asintomáticos y los leves no se observan)
NumCasos_Total<-NumCasos+NumCasos_No_Obs #todos
m<-32  #el numero de subpoblaciones
S_val <- (N_subnet_grupo-NumCasos_Total)
E_val <- NumCasos_Total #0*S_val#rep(0,m)
I_1_val <- (NumCasos_No_Obs)/2
I_2_val <- (NumCasos_No_Obs)/2
I_3_val <- (NumCasos)/2
I_4_val <- (NumCasos)/2
D_val <-  rep(0,m)
R_val <-  rep(0,m)
Y_val <-  I_2_val+I_3_val+I_4_val   #los de cualquier grupo de edad pero en severidad _2, _3 y _4
#(por ahora supongo quela obs es perfecta)
N_val <-  N_subnet_grupo
X_ini <- c(as.matrix(S_val)
, as.matrix(E_val)
, I_1_val[,1],I_2_val[,1],I_3_val[,1],I_4_val[,1]   #grupo edad 1
, I_1_val[,2],I_2_val[,2],I_3_val[,2],I_4_val[,2]   #grupo edad 2
, I_1_val[,3],I_2_val[,3],I_3_val[,1],I_4_val[,3]   #grupo edad 3
, D_val
, R_val
, as.matrix(Y_val)
, as.matrix(N_val))
n_S <- paste0("S", rep(1:3,each=m),"_", 1:m)
n_E <- paste0("E", rep(1:3,each=m),"_", 1:m)
n_I <- paste0("I", rep(1:3,each=m*4),"_",rep(rep(1:4,each=m),3),"_",1:m)
n_D <- paste0("D", 1:m)
n_R <- paste0("R", 1:m)
n_Y <- paste0("Y", rep(1:3,each=m),"_",1:m)
n_N <- paste0("N", rep(1:3,each=m),"_", 1:m)
np <- c(n_S, n_E, n_I, n_D,n_R, n_Y, n_N)
names(X_ini) <- np  #El orden es super importante
rm(list=ls())
path <- "~/Desktop/Coppel/MCMBP/" # path donde esta el repo
data <- read.csv(paste0(path,'/Data/DotacionesATM.csv'),
stringsAsFactors = FALSE, encoding = 'UTF-8')
dir(path)
names(data)[1] <- 'FECHA'
source(paste0(path, 'Code/AuxFucnts/EDA_Dotaciones_functions.R'))
library(gdata)
n.atm <- length(sort(unique(data$ID.ATM)))
library(dplyr)
library(lubridate)
data$FECHA <- dmy(data$FECHA)
n.registros <- dim(data)[1]
View(data)
sort(unique(data$PLAZA.CAJA))
###############
ciudades.atm <- sort(unique(data$PLAZA.CAJA))
ciudades.atm <- as.data.frame(ciudades.atm)
names(ciudades.atm) <- 'ciudades'
ciudades.atm$ciudades
ciudades.atm$ciudades <-
ciudades.atm$ciudades.coppel <- as.character(ciudades.atm$ciudades)
ciudades.atm$ciudades <- trim(ciudades.atm$ciudades)
ciudades.atm$ciudades <- sust('mstrong Aguascalie',
"Armstrong Aguascalientes", ciudades.atm$ciudades)
ciudades.atm$ciudades <- sust('mstrong Colima',
"Armstrong Colima", ciudades.atm$ciudades)
ciudades.atm$ciudades <- sust('mstrong Guadalajar',
"Armstrong Guadalajara", ciudades.atm$ciudades)
ciudades.atm$ciudades <- sust('mstrong Leon',
"Armstrong Leon", ciudades.atm$ciudades)
ciudades.atm$ciudades <- sust('mstrong Puerto Val',
"Armstrong Puerto Vallarta", ciudades.atm$ciudades)
ciudades.atm$ciudades <- sust('mstrong Tepic',
"Armstrong Tepic", ciudades.atm$ciudades)
sort(ciudades.atm$ciudades)
ciudades.atm$ciudades <- gsub('Armstrong', '', ciudades.atm$ciudades)
ciudades.atm$ciudades <- trim(ciudades.atm$ciudades)
capitales <- Multicore.not.geoparse(ciudades.atm$ciudades,
key.map.gcp = keys$maps)
capitales.estado <- t(capitales)
capitales.estado <- as.data.frame(capitales.estado[, 5])
names(capitales.estado)
names(capitales.estado) <- c('Estado')
ciudades.atm$estado <- as.character(capitales.estado$Estado)
sort(unique(ciudades.atm$estado))
ciudades.atm$estado <- sust('Andalucía', 'Veracruz', ciudades.atm$estado)
ciudades.atm$estado <- sust("Arizona", 'Sonora', ciudades.atm$estado)
sort(unique(ciudades.atm$estado))
index <- which(ciudades.atm$ciudades == 'Leon')
ciudades.atm$estado[index] <- 'Guanajuato'
sort(unique(ciudades.atm$estado))
ciudades.atm$estado <- sust("Castilla y León", 'Michoacán', ciudades.atm$estado)
ciudades.atm$estado <- sust("Departamento de La Paz",
"Baja California Sur", ciudades.atm$estado)
ciudades.atm$estado <- sust('Kansas', "Chihuahua", ciudades.atm$estado)
ciudades.atm$estado <- sust("Washington", 'Guerrero', ciudades.atm$estado)
sort(unique(ciudades.atm$estado))
names(data)
anmes(ciudades.atm)
names(ciudades.atm)
View(ciudades.atm)
ciudades.atm$ciudades.coppel
# join data
data1 <- merge(data, ciudades.atm, all.x = TRUE,
by.x='PLAZA.CAJA', by.y = 'ciudades.coppel')
View(data1)
data1$PLAZA.CAJA <- trim(data1$PLAZA.CAJA)
data1$ETV <- 'Pan Americano'
data1$Plaza_caja.clean <- data1$PLAZA.CAJA
data1$Plaza_caja.clean <- sust('mstrong Aguascalie',
"Armstrong Aguascalientes", data1$Plaza_caja.clean)
data1$Plaza_caja.clean <- sust('mstrong Colima',
"Armstrong Colima", data1$Plaza_caja.clean)
data1$Plaza_caja.clean <- sust('mstrong Guadalajar',
"Armstrong Guadalajara", data1$Plaza_caja.clean)
data1$Plaza_caja.clean <- sust('mstrong Leon',
"Armstrong Leon", data1$Plaza_caja.clean)
data1$Plaza_caja.clean <- sust('mstrong Puerto Val',
"Armstrong Puerto Vallarta", data1$Plaza_caja.clean)
data1$Plaza_caja.clean <- sust('mstrong Tepic',
"Armstrong Tepic", data1$Plaza_caja.clean)
sort(unique(data1$Plaza_caja.clean))
index <- which( grep("Armstrong", data1$Plaza_caja.clean))
which()
index <-  grep("Armstrong", data1$Plaza_caja.clean)
index
data1$ETV[index] <- 'Armstrong'
data1$Plaza_caja.clean <- NULL
path
write.csv(data1, file=paste0(path, 'Data/DotacionesATM_aug.csv'),
row.names = FALSE)
rm(list=ls())
path <- "~/Desktop/Coppel/MCMBP/" # path donde esta el repo
#write.csv(data1, file=paste0(path, 'Data/DotacionesATM_aug.csv'),
#         row.names = FALSE)
########################
rm(list=ls())
path <- "~/Desktop/Coppel/MCMBP/" # path donde esta el repo
#write.csv(data1, file=paste0(path, 'Data/DotacionesATM_aug.csv'),
#         row.names = FALSE)
########################
rm(list=ls())
path <- "~/Desktop/Coppel/MCMBP/" # path donde esta el repo
dir('Data')
dir(paste0(path,'Data/'))
data <- read.csv(paste0(path,'/Data/DotacionesATM_aug.csv'),
stringsAsFactors = FALSE)
View(data)
#write.csv(data1, file=paste0(path, 'Data/DotacionesATM_aug.csv'),
#         row.names = FALSE)
########################
rm(list=ls())
path <- "~/Desktop/Coppel/MCMBP/" # path donde esta el repo
dir(paste0(path,'Data/'))
data <- read.csv(paste0(path,'/Data/DotacionesATM_aug.csv'),
stringsAsFactors = FALSE)
library(dplyr)
library(ggplot)
library(ggplot2)
names(data)
ggplot(data, aes(x = TOTALBILLETES )) + geom_density() +
theme_minimal()
ggplot(data, aes(x = TOTALBILLETES, color=ETV )) + geom_density() +
theme_minimal()
names(data)
ggplot(data, aes(x = estado, y=TOTALBILLETES, fill=ETV)) +
geom_bar(stat='identity')
ggplot(data, aes(x = estado, y=TOTALBILLETES, fill=ETV)) +
geom_bar(stat='identity') + theme_minimal() +coord_flip()
library(plotly)
p <- ggplot(data, aes(x = estado, y=TOTALBILLETES, fill=ETV)) +
geom_bar(stat='identity') + theme_minimal() +coord_flip()
p <- ggplotly(p)
p
View(data)
names(data)
View(data)
p <- ggplot(data, aes(x = reorder(estado,TOTALBILLETES) ,
y=TOTALBILLETES, fill=ETV)) +
geom_bar(stat='identity') + theme_minimal() +coord_flip()
p <- ggplotly(p)
p
p <- ggplot(data, aes(x = reorder(TOTALBILLETES,estado) ,
y=TOTALBILLETES, fill=ETV)) +
geom_bar(stat='identity') + theme_minimal() +coord_flip()
p <- ggplotly(p)
p
p <- ggplot(data, aes(x = reorder(estado,TOTALBILLETES) ,
y=TOTALBILLETES, fill=ETV)) +
geom_bar(stat='identity') + theme_minimal() +coord_flip()
p <- ggplotly(p)
p
p <- ggplot(data, aes(x = reorder(estado,TOTALBILLETES) ,
y=TOTALBILLETES, fill=ETV)) + ylab("")+
geom_bar(stat='identity') + theme_minimal() +coord_flip()
p <- ggplotly(p)
p
p <- ggplot(data, aes(x = reorder(estado,TOTALBILLETES) ,
y=TOTALBILLETES, fill=ETV)) + ylab("")+
geom_bar(stat='identity') + theme_minimal() +coord_flip()
p
p <- ggplot(data, aes(x = reorder(estado,-TOTALBILLETES) ,
y=TOTALBILLETES, fill=ETV)) + ylab("")+
geom_bar(stat='identity') + theme_minimal() +coord_flip()
p
p <- ggplot(data, aes(x = reorder(estado) ,
y=TOTALBILLETES, fill=ETV)) + ylab("")+
geom_bar(stat='identity') + theme_minimal() +coord_flip()
p
?reorder
data %>% select(estado, TOTALBILLETES, ETV)%>%
group_by(estado, ETV) %>% summarise(TOTALBILLETES=sum(TOTALBILLETES)) -> x.
data %>% select(estado, TOTALBILLETES, ETV)%>%
mutate(TOTALBILLETES=TOTALBILLETES/1000) %>%
group_by(estado, ETV) %>% summarise(TOTALBILLETES=sum(TOTALBILLETES)) -> x.
x.
p <- ggplot(x., aes(x = reorder(estado, TOTALBILLETES ) ,
y=TOTALBILLETES, fill=ETV)) + ylab("") +
xlab("total en miles")
p <- ggplot(x., aes(x = reorder(estado, TOTALBILLETES ) ,
y=TOTALBILLETES, fill=ETV)) + ylab("") +
xlab("total en miles") +
geom_bar(stat='identity') + theme_minimal() +coord_flip()
p
p <- ggplot(data, aes(x = estado, y=TOTALBILLETES, fill=ETV)) +
geom_bar(stat='identity') + theme_minimal() +coord_flip()
p <- ggplotly(p)
p
ggplot(x., aes(x = reorder(estado, TOTALBILLETES ) ,
y=TOTALBILLETES, fill=ETV)) + ylab("") +
xlab("total en miles") +
geom_bar(stat='identity') + theme_minimal() +coord_flip()
names(data)
data %>% select(ciudades, TOTALBILLETES, ETV)%>%
mutate(TOTALBILLETES=TOTALBILLETES/1000) %>%
group_by(ciudades, ETV) %>% summarise(TOTALBILLETES=sum(TOTALBILLETES)) -> x.
x.
ggplot(x., aes(x = reorder(ciudades, TOTALBILLETES ) ,
y=TOTALBILLETES, fill=ETV)) + xlab("") +
ylab("total en miles") +
geom_bar(stat='identity') + theme_minimal() +coord_flip()
class(data$FECHA)
data$FECHA
library(lubridate)
data$FECHA <- ymd(data$FECHA)
names(data)
data%>% group_by(FECHA, estado) %>%
summarise(t = sum(TOTALBILLETES/1000)) -> x.
x.
ggplot(x. , aes(x = FECHA, y=t)) + geom_line() +theme_minimal()
ggplot(x. , aes(x = FECHA, y=t, color=estado)) + geom_line() +
theme_minimal()
library(lubridate)
data$FECHA <- ymd(data$FECHA)
data$FECHA
data%>% group_by(FECHA) %>%
summarise(t = sum(TOTALBILLETES/1000)) -> x.
ggplot(x. , aes(x = FECHA, y=t)) + geom_line() +
theme_minimal()
ggplot(x. , aes(x = FECHA, y=t)) + geom_line() +
theme_minimal() + ylab("")
ggplotly()
##########
data %>% select(FECHA, ETV,   TOTALBILLETES ) %>%
group_by(weekdays(FECHA), ETV) %>%
summarise( t=sum(TOTALBILLETES/1000) ) -> x.
names(x.)
names(x.)[1] <- 'Dia'
ggplot(x., aes(x=Dia, y=t, fill=ETV)) + geom_bar(stat='identity') +
theme_minimal() + ylab('importe en miles')
########
data %>% filter(FECHA <= '2019-05-31') %>%
select(FECHA, ETV,   TOTALBILLETES ) %>%
group_by(week(FECHA), ETV) %>%
summarise( t=sum(TOTALBILLETES) ) -> x.
x.
names(x.)[1] <- 'Semana'
ggplot(x., aes(x=Semana, y=t, fill=ETV)) + geom_bar(stat='identity') +
theme_minimal() + ylab('importe en miles') ->p
p
p <- ggplotly(p)
p
data$FECHA
max(data$FECHA)
data %>% filter(FECHA <= '2019-05-31')
########
summary(data$FECHA)
data %>% filter(FECHA <= ymd('2019-05-31')) %>%
select(FECHA, ETV,   TOTALBILLETES ) %>%
group_by(week(FECHA), ETV) %>%
summarise( t=sum(TOTALBILLETES) ) -> x.
names(x.)[1] <- 'Semana'
ggplot(x., aes(x=Semana, y=t, fill=ETV)) + geom_bar(stat='identity') +
theme_minimal() + ylab('importe en miles') ->p
p
data %>% filter(FECHA <= ymd('2019-05-31')) %>%
select(FECHA, ETV,   TOTALBILLETES ) %>%
group_by(week(FECHA), ETV) %>%
summarise( t=sum(TOTALBILLETES/1000) ) -> x.
names(x.)[1] <- 'Semana'
ggplot(x., aes(x=Semana, y=t, fill=ETV)) + geom_bar(stat='identity') +
theme_minimal() + ylab('importe en miles') ->p
p
p <- ggplotly(p)
p
data %>% filter(FECHA <= ymd('2019-05-31'))
data %>% filter(FECHA <= ymd('2019-05-31')) ->y
View(y)
ymd('2018-06-01') + year(1)
ymd('2018-06-01') + years(1)
ymd('2018-06-01') + years(1) - days(1)
data %>% filter(FECHA <= ymd('2019-05-31')) %>%
select(FECHA, ETV,   TOTALBILLETES ) %>%
group_by(week(FECHA), ETV) %>%
summarise( t=sum(TOTALBILLETES/1000) ) -> x.
names(x.)[1] <- 'Semana'
ggplot(x., aes(x=Semana, y=t, fill=ETV)) + geom_bar(stat='identity') +
theme_minimal() + ylab('importe en miles') ->p
p <- ggplotly(p)
View(data)
########### variabilidad de montos por cajero en dotaciones
names(data)
data %>% select( FECHA, ID.ATM, TOTALBILLETES) %>%
group_by(ID.ATM) %>% summarise( TOTALBILLETES = sum(TOTALBILLETES/1000),
sd = sd(TOTALBILLETES), n =n()) %>%
arrange(sd) ->x.
names(x.)
ggplot(x., aes(x = TOTALBILLETES, y = sd, alpha= 0.5, color=n )) + geom_point() +
theme_minimal()
View(x.)
View(data)
data %>% select( FECHA, ID.ATM, TOTALBILLETES)
data %>% select( FECHA, ID.ATM, TOTALBILLETES) %>%
group_by(ID.ATM)
data %>% select( FECHA, ID.ATM, TOTALBILLETES) %>%
group_by(ID.ATM) %>% summarise( t = sum(TOTALBILLETES/1000),
sd = sd(TOTALBILLETES), n =n()) %>%
arrange(sd) ->x.
x.
names(x.)
ggplot(x., aes(x = t, y = sd, alpha= 0.5, color=n )) + geom_point() +
theme_minimal()
ggplot(x., aes(x = t, y = sd, alpha= 0.5, color=n) ) + geom_point() +
theme_minimal() + xlim(c(0, 10**8))
ggplot(x., aes(x = t, y = sd, alpha= 0.5, color=n )) + geom_point() +
theme_minimal()
ggplot(x., aes(x = t, y = sd, alpha= 0.5, color=n) ) + geom_point() +
theme_minimal() + xlim(c(0, 10**5))
ggplot(x., aes(x = t, y = sd, alpha= 0.5, color=n )) + geom_point() +
theme_minimal()
ggplot(x., aes(x = t, y = sd, alpha= 0.5, color=n) ) + geom_point() +
theme_minimal() + xlim(c(0, 10**5))
ggplot(x., aes(x = sd, y = n, color=t )) + geom_point() +
theme_minimal()
